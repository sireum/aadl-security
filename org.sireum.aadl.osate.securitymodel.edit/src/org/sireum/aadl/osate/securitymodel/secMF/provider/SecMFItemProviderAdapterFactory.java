/**
 * Copyright (c) 2021, Kansas State University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.sireum.aadl.osate.securitymodel.secMF.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.sireum.aadl.osate.securitymodel.secMF.util.SecMFAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SecMFItemProviderAdapterFactory extends SecMFAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SecMFItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SecModelLibrary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecModelLibraryItemProvider secModelLibraryItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SecModelLibrary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecModelLibraryAdapter()
  {
    if (secModelLibraryItemProvider == null)
    {
      secModelLibraryItemProvider = new SecModelLibraryItemProvider(this);
    }

    return secModelLibraryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SecModelSubclause} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecModelSubclauseItemProvider secModelSubclauseItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SecModelSubclause}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecModelSubclauseAdapter()
  {
    if (secModelSubclauseItemProvider == null)
    {
      secModelSubclauseItemProvider = new SecModelSubclauseItemProvider(this);
    }

    return secModelSubclauseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SMFClassification} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SMFClassificationItemProvider smfClassificationItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SMFClassification}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSMFClassificationAdapter()
  {
    if (smfClassificationItemProvider == null)
    {
      smfClassificationItemProvider = new SMFClassificationItemProvider(this);
    }

    return smfClassificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SMFTypeRef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SMFTypeRefItemProvider smfTypeRefItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SMFTypeRef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSMFTypeRefAdapter()
  {
    if (smfTypeRefItemProvider == null)
    {
      smfTypeRefItemProvider = new SMFTypeRefItemProvider(this);
    }

    return smfTypeRefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SMFDeclassification} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SMFDeclassificationItemProvider smfDeclassificationItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SMFDeclassification}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSMFDeclassificationAdapter()
  {
    if (smfDeclassificationItemProvider == null)
    {
      smfDeclassificationItemProvider = new SMFDeclassificationItemProvider(this);
    }

    return smfDeclassificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SmfTypeDef} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SmfTypeDefItemProvider smfTypeDefItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SmfTypeDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSmfTypeDefAdapter()
  {
    if (smfTypeDefItemProvider == null)
    {
      smfTypeDefItemProvider = new SmfTypeDefItemProvider(this);
    }

    return smfTypeDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.sireum.aadl.osate.securitymodel.secMF.SecMFRoot} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecMFRootItemProvider secMFRootItemProvider;

  /**
   * This creates an adapter for a {@link org.sireum.aadl.osate.securitymodel.secMF.SecMFRoot}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecMFRootAdapter()
  {
    if (secMFRootItemProvider == null)
    {
      secMFRootItemProvider = new SecMFRootItemProvider(this);
    }

    return secMFRootItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose()
  {
    if (secModelLibraryItemProvider != null) secModelLibraryItemProvider.dispose();
    if (secModelSubclauseItemProvider != null) secModelSubclauseItemProvider.dispose();
    if (smfClassificationItemProvider != null) smfClassificationItemProvider.dispose();
    if (smfTypeRefItemProvider != null) smfTypeRefItemProvider.dispose();
    if (smfDeclassificationItemProvider != null) smfDeclassificationItemProvider.dispose();
    if (smfTypeDefItemProvider != null) smfTypeDefItemProvider.dispose();
    if (secMFRootItemProvider != null) secMFRootItemProvider.dispose();
  }

}
