grammar org.sireum.aadl.osate.securitymodel.SecMF with org.osate.xtext.aadl2.properties.Properties

generate secMF "http://www.sireum.org/aadl/osate/securitymodel"

import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


SecMFRoot returns aadl2::NamedElement: 
	 {SecMFRoot} (library=SMFLibrary | subclauses+=SMFSubclause*)
;

AnnexLibrary returns aadl2::AnnexLibrary:
	 SecModelLibrary 
 ;
 
 
AnnexSubclause returns aadl2::AnnexSubclause:
	 SecModelSubclause 
;	

NamedElement returns aadl2::NamedElement:
	SecModelLibrary   |  SMFClassification | SMFDeclassification  | SMFTypeDef | SMFTypeRef
;


SecModelLibrary returns SecModelLibrary: 
	{SecModelLibrary}
	(DomainTypesKeywords
		(types+=SMFTypeDef)*
	EndTypesKeywords ';'	
	)?
; 

SMFLibrary returns SecModelLibrary:
	{SecModelLibrary}
	('library' name=QEMREF
		(
			DomainTypesKeywords
			(types+=SMFTypeDef)*
			EndTypesKeywords ';'
		)?
	) |
	('package' name=QEMREF 'public'
  'annex' ID  '{**' 
	(
		DomainTypesKeywords	
		(type+=SMFTypeDef)*
		EndTypesKeywords ';'
	)?
	'**}' ';' 'end' QEMREF ';'
	)
;	
	
Element returns aadl2::Element:
	 SMFTypeRef
;	
	 
ModalElement returns aadl2::ModalElement:
	SecModelSubclause 
;	 	 

SMFSubclause returns SecModelSubclause:
	{SecModelSubclause} 'subclause' name=QCREF
	(ClassificationKeywords (classification += SMFClassification)+)?
	(DeclassificationKeywords (declassification += SMFDeclassification)+)?
;
	 
SecModelSubclause returns SecModelSubclause:
	{SecModelSubclause}
	(ClassificationKeywords (classification += SMFClassification)+)?
	(DeclassificationKeywords (declassification += SMFDeclassification)+)?
; 

SMFClassification returns SMFClassification:
	{SMFClassification}
	(feature=[aadl2::NamedElement| ID])
	':' typeRef = [SMFTypeRef|ID]
	';'
;

SMFTypeRef returns SMFTypeRef:
	SMFTypeDef
;

SMFDeclassification returns SMFDeclassification:
	{SMFDeclassification}
	(flow=[aadl2::NamedElement])
	':' (srcName=[SMFTypeRef|ID] | any?='any') '->' snkName=[SMFTypeRef|ID] ';'
;



SMFTypeDef returns SmfTypeDef:
	name=ID (
		(':' 'type')
		|(':' 'type' 'extends' type+=([SMFTypeRef|ID])*)
	)
	';';

ClassificationKeywords:
	'classification'
;

DeclassificationKeywords:
	'de-classification'
;

DomainTypesKeywords:
	'domain' 'types'
;

EndTypesKeywords:
	'end' 'types'
;


@Override 
terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;



@Override 
terminal INTEGER_LIT : ('0'..'9')+;


QUALIFIEDNAME: ID ('.' ID)+;

QEMREF:
	 ID ('::' ID)* ;//('.' ID )?;